// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain


// Input: It uses texture coords as the random number seed.
// Output: Random number: [0,1), that is between 0.0 and 0.999999... inclusive.
// Author: Michael Pohoreski
// Copyright: Copyleft 2012 :-)
// NOTE: This has been upgraded to version 3 !!
float rand( float2 p )
{
  // We need irrationals for pseudo randomness.
  // Most (all?) known transcendental numbers will (generally) work.
  const float2 r = float2(
    23.1406926327792690,  // e^pi (Gelfond's constant)
     2.6651441426902251); // 2^sqrt(2) (Gelfondâ€“Schneider constant)
  return frac( cos(123456789 % 0.0000000001 + 256. * dot(p,r) ) );  
} 
/*
float rand (float2 uv) { 
    return frac(sin(dot(uv.xy, float2(12.9898, 78.233))) * 43758.5453123);
}
*/
float noise (float2 uv) {
    float2 ipos = floor(uv);
    float2 fpos = frac(uv); 
                
    float o  = rand(ipos);
    float x  = rand(ipos + float2(1, 0));
    float y  = rand(ipos + float2(0, 1));
    float xy = rand(ipos + float2(1, 1));

    float2 smooth = smoothstep(0, 1, fpos);
    return lerp( lerp(o,  x, smooth.x), lerp(y, xy, smooth.x), smooth.y);
}

float fractal_noise (float2 uv) {
    float n = 0;
    // fractal noise is created by adding together "octaves" of a noise
    // an octave is another noise value that is half the amplitude and double the frequency of the previously added noise
    // below the uv is multiplied by a value double the previous. multiplying the uv changes the "frequency" or scale of the noise becuase it scales the underlying grid that is used to create the value noise
    // the noise result from each line is multiplied by a value half of the previous value to change the "amplitude" or intensity or just how much that noise contributes to the overall resulting fractal noise.

    n  = (1 / 2.0)  * noise( uv * 1);
    n += (1 / 4.0)  * noise( uv * 2); 
    n += (1 / 8.0)  * noise( uv * 4); 
    n += (1 / 16.0) * noise( uv * 8);
                
    return n;
}

int2 dime;
RWStructuredBuffer<int> teamOf; // set -1 for ocean

float seed;

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int index = (id.y * dime.x) + id.x;
    float2 uv; 
    uv.x = (float2)id.x / (float2)dime.x;
    uv.y = (float2)id.y / (float2)dime.y;
    float2 cuv = abs(uv - 0.5); 
    
    //;// * 
    float oval = 1.1 * (0.9 - length(cuv)) * (fractal_noise(uv * 7 + seed) + 0.4);
    //oval *= 1 - step(1 - length(cuv), 0.5);
    //oval += min(0.59, 1 * pow(cuv.x, 4));
    //oval += min(0.59, 1 * pow(cuv.y, 4)); 

    int omask = step(0.5, oval);
    teamOf[index] = omask - 1; //-1 for ocean, 0 for other
}
