// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float> popcount;
StructuredBuffer<int> growths;
RWStructuredBuffer<int> teamOf;
//StructuredBuffer<float> teamGrowth;
int2 dime;

struct Inf{
    int x;
    int y;
    float strength;
    int team;
    int isArmy;
};

float deltOverride;

int numInfs;
StructuredBuffer<Inf> infs; 


[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int index = (id.y * dime.x) + id.x;
    int team = teamOf[index];

    if(team == -1) return;
    if(growths[team] == 0) return;

    //ignore boundary texels
    if(id.x < (uint)1 || id.x > dime.x - (uint)1){
        return;
    }
    if(id.y < (uint)1 || id.y > dime.y - (uint)1){return;}

    float md = 100000;
    for(int i = 0; i < numInfs; i++){ 

        int2 pos = int2(infs[i].x, infs[i].y);
        float dist = distance(pos, id.xy) + 0.01;

        //is one if dist < md;
        int cl = step(dist, md);

        //when cl is one, assign new distance
        //when cl is 0, write old distance
        md = dist * cl + (1 - cl) * md;
    }
    float cityPower = 1 / pow(md, 0.7);
    cityPower = clamp(cityPower, 0, 1);
    
    //count surrounding population and "live" squares
    float totPop = 0;
    int sur = 0;
    int lsur = 0;
    for(int x = 0; x < 3; x++){
        int xindex = index + (x - 1);
        int yindex;

        for(int y = 0; y < 3; y++){
            yindex = xindex + (y - 1) * dime.x;
            totPop += popcount[yindex];

            //this adds up high density cells used for overpop calculations
            sur += step(0.8, popcount[yindex]);

            //this adds up low density cells used for expansion
            lsur += step(0.2, popcount[yindex]);
        }
    }
    float avg = totPop * 0.111;
    float mypop = popcount[index];
    cityPower *= min(8, totPop * 0.5);
    
    //amount change per tick (second)
    float delt = max(0.0015, deltOverride); //used for speeding up growth for demonstration

    float growth_remap = pow(pow(2, growths[team]), 0.2);
    //dynamic max pop calculation based on distance from city (md)
    float cmaxPop = pow(cityPower * 1, 0.5) + pow(cityPower * 1, 2);
    cmaxPop *= growth_remap;
    cmaxPop = min(2 * growth_remap, cmaxPop);
    cmaxPop -= step(7, sur);

    int growthSwitch = step(0, growths[team]);
    //growth mechanism
    int shrinkmask = step(cmaxPop, mypop);//max(0, min(1, cmaxPop)); //totPop?

    //grow if over min spec
    int growmask = step(1.9, step(6, lsur) + step(2, sur)); 
    int minigrowth = step(3, lsur) * (1 - step(2, sur)) * (1 - step(8, lsur));
    minigrowth += step(mypop, avg * 0.8);
    float growth = growmask * delt * sur * (1 - shrinkmask) * cityPower;
    growth += minigrowth * delt * 1;

    float shrink = delt * step(4, lsur) * (1 - step(7, lsur)) * 5;
    shrink += delt * step(6, lsur) * (1 - step(8, lsur)) * 2.5;
    float newPop = mypop + growth * (1 - shrinkmask) * growthSwitch;
    newPop -= shrink * (1 - growthSwitch) * 15 * (1 - growth_remap);
    newPop = max(newPop, 0.02);

    //step to prevent zero-ing out a cell
    //the lower bound is twice the "cityPower", a nonlinear calculation that correlates
    //with the distance from the current texel to the nearest city center

    int alive = step(0.01, mypop);
    float diff = newPop - mypop;
    int drop = step(diff, 0); //1 if pop is decreasing

    float floor = alive * (growthSwitch * mypop + (1 - growthSwitch) * newPop); 
    popcount[index] = drop * floor + (1 - drop) * newPop * alive;
}
