#pragma kernel CSMain

int2 dime;
StructuredBuffer<float> popBuffer;
RWTexture2D<float4> Result;
StructuredBuffer<int> teamOf;

struct Color{
    float x;
    float y;
    float z;
};

int numStates; 
float seed;
float time;
StructuredBuffer<Color> stateColors;

//build mode flag
int buildMode;

float rand (float2 uv) { 
    return frac(sin(dot(uv.xy, float2(12.9898, 78.233))) * 43758.5453123);
}

float noise (float2 uv) {
    float2 ipos = floor(uv);
    float2 fpos = frac(uv); 
                
    float o  = rand(ipos);
    float x  = rand(ipos + float2(1, 0));
    float y  = rand(ipos + float2(0, 1));
    float xy = rand(ipos + float2(1, 1));

    float2 smooth = smoothstep(0, 1, fpos);
    return lerp( lerp(o,  x, smooth.x), lerp(y, xy, smooth.x), smooth.y);
}

float fractal_noise (float2 uv) {
    float n = 0;
    // fractal noise is created by adding together "octaves" of a noise
    // an octave is another noise value that is half the amplitude and double the frequency of the previously added noise
    // below the uv is multiplied by a value double the previous. multiplying the uv changes the "frequency" or scale of the noise becuase it scales the underlying grid that is used to create the value noise
    // the noise result from each line is multiplied by a value half of the previous value to change the "amplitude" or intensity or just how much that noise contributes to the overall resulting fractal noise.

    n  = (1 / 2.0)  * noise( uv * 1);
    n += (1 / 4.0)  * noise( uv * 2); 
    n += (1 / 8.0)  * noise( uv * 4); 
    n += (1 / 16.0) * noise( uv * 8);
                
    return n;
}

int IsBorder(int index, int3 id){

    //check to see if this is a valid index
    if((index - 3) > dime.x && (index + 3) < dime.x * (dime.y - 1)){
    //if((id.x - 5) > 0 && id.x + 5 < dime.x && (index + 1) < dime.x * (dime.y - 1)){
        int border = 1;
        int di = 0;
	    di = abs(teamOf[index] - teamOf[index + dime.x * border]);
        di += abs(teamOf[index] - teamOf[index - dime.x * border]);
        di += abs(teamOf[index] - teamOf[index + border]);
        di += abs(teamOf[index] - teamOf[index - border]);

        return di;
    }

    //return true if we're on the edge
    return 0;//1;
}


[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int index = (id.y * dime.x) + id.x;
    float3 col = float3(0, 0, 0);

    float2 uv;
    uv.x = (float2)id.x / (float2)dime.x;
    uv.y = (float2)id.y / (float2)dime.y;

    if(teamOf[index] < 0){


        float oval = fractal_noise(uv * 2 + seed); 
        oval += 0.5 * pow(abs(uv.x - 0.5) + 0.2, 2);
        oval += 0.5 * pow(abs(uv.y - 0.5) + 0.2, 2);
        float otime = 0.5 * frac(0.5 * (1 + sin(time)));
        int omask = step(0.8 + 0.5 * otime, oval) - step(0.805 + 0.5 * otime, oval);
        omask -= step(0.5 * frac(0.5 * (1 + sin(time + 0.01))), otime);

        //float otime2 = 0.5 * frac(0.5 * (1 + sin(time + 0.5)));
        //int omask = step(0.8 + 0.5 * otime2, oval) - step(0.805 + 0.5 * otime2, oval);
        //omask -= step(0.5 * frac(0.5 * (1 + sin(time + 0.01 + 0.5))), otime2); 


        col += omask * float3(0, 0, 0.05);

        Result[id.xy] = float4(col, 0);  
        return;
    }

 
    float3 scol = float3(stateColors[teamOf[index]].x,
        stateColors[teamOf[index]].y, 
	    stateColors[teamOf[index]].z); 
    //

    int flip = 2 * step(0.5, frac(-time * 1 - length(pow(2000 * uv, 0.5))));
    //flip += (1 - step(0.1, teamOf[index]));
    float pop = popBuffer[index] * (1 - buildMode) + buildMode * (flip * 0.3);

    pop = clamp(pop, 0, pop);
    float stayZ = step(0.01, pop);
    pop *= 1.3;//pow(pop + 0.2, 1.2);
    pop = pop * stayZ;
    col += scol * pop;
    col = clamp(col, 0, 1);

    // build 0.9 color effects
    col = (col.r + col.g + col.b).rrr * 0.3 * col;
    col = pow(col + 0.1, 2) + scol * 0.04 * pop;
    float3 yellow = float3(0.9, 0.7,0.8);
    col *= yellow;
    // end 0.9 color effects

    col += IsBorder(index, id) * scol;

    Result[id.xy] = float4(col, 0);  
}
