#pragma kernel CSMain

int2 dime;
StructuredBuffer<float> popBuffer;
RWTexture2D<float4> Result;
StructuredBuffer<int> teamOf;

//avoid construction
StructuredBuffer<int2> exclude;
int exclusionLength;
int exclusionDistance;

struct Color{
    float x;
    float y;
    float z;
};

int numStates; 
float seed;
float time;
StructuredBuffer<Color> stateColors;

//build mode flag
int buildMode;
int playerTeam;
int airmode = 1;
int renderOcean;

//thanks chatgpt
// A simple cross-platform hash function
uint Hash(uint value)
{
    value ^= value >> 16;  // Mix the high and low bits of value
    value *= 0x45d9f3b;    // A large prime multiplier for further mixing
    value ^= value >> 16;
    value *= 0x45d9f3b;
    value ^= value >> 16;
    
    return value;
}
// A simple and consistent pseudorandom function in HLSL
uint Xorshift32(uint seed)
{
    // Xorshift 32-bit pseudorandom number generator
    seed ^= seed >> 21;  // XOR the seed with its shifted value
    seed ^= seed << 35;  // XOR again with a different shift
    seed ^= seed >> 4;   // XOR with another shift
    seed *= 2685821657736338717u; // A large prime multiplier for further mixing
    seed ^= seed >> 15;  // Final XOR mix 
    return seed;
}
// Generate a pseudorandom float between 0.0 and 1.0
float RandomFloat(uint seed)
{
    uint r = Hash(seed);  // Get a random 32-bit integer
    return (float)(r & 0x7FFFFFFF) / 0x7FFFFFFF; // Normalize to [0, 1)
}

float rand (float2 uv) { 
    uint seed = (uint)(uv.x * 10000.0);
    uint seed2 = (uint)(uv.y * 10000.0);
    return RandomFloat(seed + Hash(seed2));
    //return frac(sin(dot(uv.xy, float2(12.9898, 78.233))) * 43758.5453123);
} 

float noise (float2 uv) {
    float2 ipos = floor(uv); 
    float2 fpos = frac(uv); 
                
    float o  = rand(ipos);
    float x  = rand(ipos + float2(1, 0));
    float y  = rand(ipos + float2(0, 1));
    float xy = rand(ipos + float2(1, 1));

    float2 smooth = smoothstep(0, 1, fpos);
    return lerp( lerp(o,  x, smooth.x), lerp(y, xy, smooth.x), smooth.y);
}

float fractal_noise (float2 uv) {
    float n = 0;
    // fractal noise is created by adding together "octaves" of a noise
    // an octave is another noise value that is half the amplitude and double the frequency of the previously added noise
    // below the uv is multiplied by a value double the previous. multiplying the uv changes the "frequency" or scale of the noise becuase it scales the underlying grid that is used to create the value noise
    // the noise result from each line is multiplied by a value half of the previous value to change the "amplitude" or intensity or just how much that noise contributes to the overall resulting fractal noise.

    n  = (1 / 2.0)  * noise( uv * 1);
    n += (1 / 4.0)  * noise( uv * 2); 
    n += (1 / 8.0)  * noise( uv * 4); 
    n += (1 / 16.0) * noise( uv * 8);
                
    return n;
}

int IsBorder(int index, int3 id){

    //check to see if this is a valid index
    if((index - 3) > dime.x && (index + 3) < dime.x * (dime.y - 1)){
    //if((id.x - 5) > 0 && id.x + 5 < dime.x && (index + 1) < dime.x * (dime.y - 1)){
        int border = 1;
        int di = 0;
	    di = abs(teamOf[index] - teamOf[index + dime.x * border]);
        di += abs(teamOf[index] - teamOf[index - dime.x * border]);
        di += abs(teamOf[index] - teamOf[index + border]);
        di += abs(teamOf[index] - teamOf[index - border]);

        return di;
    }

    //return true if we're on the edge
    return 1;//1;
}
float lum(float3 col){
    return col.x * 0.81 + col.y * 0.31 + col.z * 0.27;
}
int Excluded(uint3 id){
    for(int i = 0; i < exclusionLength; i++){
        if(distance(id.xy, exclude[i]) < exclusionDistance){
	        return 1;
	    }
    }
    return 0;
}

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int index = (id.y * dime.x) + id.x;
    float3 col = float3(0, 0, 0);

    float2 uv;
    uv.x = (float2)id.x / (float2)dime.x;
    uv.y = (float2)id.y / (float2)dime.y;


    if(teamOf[index] < 0){

        if(renderOcean == 0){
            Result[id.xy] = 0;
	        return;
	    }
        float2 cuv = abs(uv - 0.5); 

        float2 suv = round(uv * 200) / 200;
        float oval = 1.1 * (0.9 - length(cuv)) * (fractal_noise(uv * 7 + seed) + 0.4);
        int omask = step(0.5, oval);


        float otime = -time * 0.05;
        float3 ocol= float3(0, 0, 0.1);
        float3 ocol2 = float3(0.1, 0.2, 0.8) * 0.2;
        float3 ocol3 = float3(0, 0.2, 0.2) * 0.3;
        float3 ocol4 = float3(0.01, 0.15, 0.15) * 0.8;

        float fn = pow(fractal_noise(suv * 12 + seed + otime) + 0.5, 10);
        fn += 0.2 * pow(fractal_noise(suv * 30 - otime * 3) + 0.5, 10); 
        fn *= 0.5;
        float shore = pow(fractal_noise(suv * 60 + seed + time * 0.3) + 0.3, 7);
        shore *= 0.3 * saturate(step(0.47 + sin(time) * 0.01, oval) - step(0.49 + sin(time) * 0.01, oval));

        int l4 = step(4, fn);// - l3;
        int l3 = step(1.5, fn) - l4;
        int l2 = step(0.6, fn);// - l3;// - l4;
        int l1 = step(0.1, fn) - l2;// - l3 - l4;
        int l0 = 1 - step(0.3, fn);

        col = l1 * ocol + l2 * ocol2 + l3 * ocol3 + l4 * ocol4;
        col *= 0.6;
        col += shore;
        //col +=  l1 * ocol + * fn2 * ocol3; 


        Result[id.xy] = float4(col, 0);  
        return;
    }

 
    float3 scol = float3(stateColors[teamOf[index]].x,
        stateColors[teamOf[index]].y, 
	    stateColors[teamOf[index]].z); 
    //
    airmode += buildMode;

    int flip = 2 * step(0.5, frac(-time * 1 - length(pow(2000 * uv, 0.5))));
    //flip += (1 - step(0.1, teamOf[index]));
    int excluded = Excluded(id); 
    int noBuild = max(0, abs(teamOf[index] - playerTeam) + excluded);
    float pop = popBuffer[index] * (1 - buildMode) + buildMode * ((flip * noBuild) + popBuffer[index]);

    pop = clamp(pop, 0, pop);
    float stayZ = step(0.01, pop);
    pop *= 1.3;//pow(pop + 0.2, 1.2);
    pop = pop * stayZ;
    col += scol * pop;
    col = clamp(col, 0, 1);

    // build 0.9 color effects
    col = (col.r + col.g + col.b).rrr * 0.3 * col;
    col = pow(col + 0.1, 2) + scol * 0.04 * pop;
    float3 yellow = float3(0.9, 0.7,0.8);
    col *= yellow;
    // end 0.9 color effects

    col = pow(0.1 * col, 0.8) * 2;//1.3;

    float3 air = 0.03 * col + 0.2 * pow(0.1 * lum(col), 0.25) * float3(0.1, 1,0.1);
    col = airmode * air + (1 - airmode) * col;
    float3 border = IsBorder(index, id) * scol;
    col += 1 * border * airmode+ (1 - airmode) * border;

    int redFlip = 1 - step(0, teamOf[index] - excluded);
    col *= redFlip * (step(2, flip) * redFlip + float3(10, 0, 0)) + (1 - redFlip);
    //float dude = rand(uv);
    //Result[id.xy] = dude;//float4(col, 0);  
    Result[id.xy] = float4(col, 0);  
}
